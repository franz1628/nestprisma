generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admninistrativo {
  id              Int       @id @default(autoincrement())
  nombres         String    @db.VarChar(90)
  apellidopaterno String    @db.VarChar(90)
  apellidomaterno String    @db.VarChar(90)
  idtipodocumento Int
  numerodocumento String    @db.VarChar(90)
  fechanacimiento DateTime  @db.Date
  estado          Int?      @default(1)
  created_at      DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Timestamp(6)
  updated_at      DateTime? @db.Timestamp(6)
}

model alumno {
  id              Int              @id @default(autoincrement())
  nombres         String           @db.VarChar(90)
  apellidopaterno String           @db.VarChar(90)
  apellidomaterno String           @db.VarChar(90)
  idtipodocumento Int
  numerodocumento String           @db.VarChar(90)
  fechanacimiento DateTime         @db.Date
  estado          Int?             @default(1)
  created_at      DateTime?        @default(dbgenerated("CURRENT_DATE")) @db.Timestamp(6)
  updated_at      DateTime?        @db.Timestamp(6)
  estadomatricula Int?
  username        String           @db.VarChar(120)
  password        String           @db.VarChar(120)
  curso_alumno    curso_alumno[]
  curso_profesor  curso_profesor[]
  nota            nota[]
}

model curso {
  id             Int              @id @default(autoincrement())
  nombre         String           @db.VarChar(90)
  estado         Int?             @default(1)
  created_at     DateTime?        @default(dbgenerated("CURRENT_DATE")) @db.Timestamp(6)
  updated_at     DateTime?        @db.Timestamp(6)
  curso_alumno   curso_alumno[]
  curso_profesor curso_profesor[]
  nota           nota[]
}

model curso_alumno {
  id         Int       @id @default(autoincrement())
  id_alumno  Int?
  id_curso   Int?
  estado     Int?      @default(1)
  created_at DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  alumno     alumno?   @relation(fields: [id_alumno], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_curso_alumno_alumno")
  curso      curso?    @relation(fields: [id_curso], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_curso_alumno_curso")
}

model nota {
  id            Int       @id @default(autoincrement())
  id_alumno     Int?
  id_curso      Int?
  id_prueba     Int?
  valor         Int?
  valor_reclamo Int?
  estado        Int?      @default(1)
  created_at    DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Timestamp(6)
  updated_at    DateTime? @db.Timestamp(6)
  alumno        alumno?   @relation(fields: [id_alumno], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_nota_alumno")
  curso         curso?    @relation(fields: [id_curso], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_nota_curso")
  prueba        prueba?   @relation(fields: [id_prueba], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_nota_prueba")
}

model periodo {
  id          Int       @id @default(autoincrement())
  nombre      String    @db.VarChar(90)
  fechainicio DateTime  @db.Date
  fechafin    DateTime  @db.Date
  estado      Int?      @default(1)
  created_at  DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)
}

model profesor {
  id              Int       @id @default(autoincrement())
  nombres         String    @db.VarChar(90)
  apellidopaterno String    @db.VarChar(90)
  apellidomaterno String    @db.VarChar(90)
  idtipodocumento Int
  numerodocumento String    @db.VarChar(90)
  fechanacimiento DateTime  @db.Date
  estado          Int?      @default(1)
  created_at      DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Timestamp(6)
  updated_at      DateTime? @db.Timestamp(6)
}

model prueba {
  id         Int       @id @default(autoincrement())
  nombre     String    @db.VarChar(90)
  peso       Int?
  estado     Int?      @default(1)
  created_at DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  nota       nota[]
}

model curso_profesor {
  id          Int       @id @default(autoincrement())
  id_profesor Int?
  id_curso    Int?
  estado      Int?      @default(1)
  created_at  DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)
  curso       curso?    @relation(fields: [id_curso], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_curso_profesor_curso")
  alumno      alumno?   @relation(fields: [id_profesor], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_curso_profesor_profesor")
}

model genero {
  descripcion String?   @db.VarChar(100)
  estado      Int?      @default(1)
  created_at  DateTime? @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)
  id          Int       @id(map: "genero_pk") @default(autoincrement())
}
